#!/usr/bin/python

"""
Munkitap

munkitap

Tool for automating building macOS packages from the latest Homebrew
formulae using Tim Sutton's brew-pkg tool and importing them into munki.

Requires Homebrew and brew-pkg:

https://github.com/Homebrew/brew
https://github.com/timsutton/brew-pkg


Created by Jacob F. Grant

Written: 06/9/18
Updated: 10/07/18
"""

import argparse
import json
import os
import subprocess

from glob import glob

from munkitaplib import *


BUNDLE_ID = 'com.github.munkitap'


# Munkitap functions

def add_formula(formula, quiet=False):
    """Add a formula to munkitap"""
    on_tap = get_pref('ON_TAP')
    if not on_tap:
        on_tap = set()
    else:
        on_tap = set(on_tap)
    if formula in on_tap:
        if not quiet:
            print formula + " already in munkitap"
    else:
        on_tap.add(formula)
        set_pref('ON_TAP', list(on_tap))
        if not quiet:
            print formula + " added to munkitap"


def remove_formula(formula, quiet=False):
    """Remove a formula from munkitap"""
    on_tap = set(get_pref('ON_TAP')) or set()
    if formula not in on_tap:
        if not quiet:
            print formula + " not in munkitap."
    else:
        # Remove from formula list
        on_tap.remove(formula)
        set_pref('ON_TAP', list(on_tap))
        if not quiet:
            print formula + " removed from munkitap."
    # Remove from formula info array
    formula_info = dict(get_formula_info())
    try:
        del formula_info[formula]
        if not quiet:
            print formula + " info removed from munkitap."
    except KeyError:
        pass
    set_pref('FORMULA_INFO', formula_info)


def update_formula_info(formula):
    """Update formula info"""
    formula_info = dict(get_formula_info())
    brew_formula_info = subprocess.check_output([get_brew(), 'info', '--json=v1', formula])
    brew_formula_info = json.loads(brew_formula_info)[0]
    if formula not in formula_info.keys():
        formula_info[formula] = {}
    else:
        formula_info[formula] = dict(formula_info[formula])
    formula_info[formula]['description'] = brew_formula_info['desc']
    formula_info[formula]['url'] = brew_formula_info['homepage']
    formula_info[formula]['version'] = brew_formula_info['versions']['stable']
    if 'pkg' not in formula_info[formula].keys():
        formula_info[formula]['pkg'] = ''
    set_pref('FORMULA_INFO', formula_info)


def update_formula_info_pkg(formula, pkg_path):
    """Update pkg key in formula info"""
    formula_info = dict(get_formula_info())
    if formula not in formula_info.keys():
        update_formula_info(formula)
        formula_info = dict(get_formula_info())
    formula_info[formula] = dict(formula_info[formula])
    formula_info[formula]['pkg'] = pkg_path
    set_pref('FORMULA_INFO', formula_info)


def pour_formula(formula, identifier=None, force_pour=False, quiet=False):
    """Pour a formula (build a pkg)"""
    formula_info = get_pref('FORMULA_INFO')[formula]
    build_path = os.path.join(get_cache(), formula)
    if not force_pour:
        for pkg in glob(
            os.path.join(
                build_path,
                (formula + '-' + formula_info['version'] + '*.pkg')
            )
        ):
            if os.path.isfile(pkg):
                if not quiet:
                    print pkg + " already exists."
                    print "  (Use the --force command if you wish to rebuild this package.)"
                return None, None
    create_dir(build_path)
    if not quiet:
        print "Building " + (formula + '-' + formula_info['version'] + '.pkg') + " at " + build_path + "/"
    if not identifier:
        identifier = get_id()
    out, err = subprocess.Popen(
        [
            get_brew(),
            'pkg',
            '--with-dep',
            '--identifier-prefix',
            identifier,
            formula,
        ],
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
        cwd=build_path
    ).communicate()
    return out, err


# Parser functions

def munkitap_add_subparser(subparsers):
    """Munkitap 'add' subparser"""
    add_command_subparser = subparsers.add_parser(
        "add",
        help="Add brew formula to munkitap"
    )
    add_command_subparser.add_argument(
        "formula",
        action='store',
        type=str,
        help="Brew formula to add to munkitap",
    )
    add_command_subparser.add_argument(
        "-i",
        "--install",
        action="store_true",
        default=False,
        help="Tells brew to install/upgrade the given formula"
    )


def munkitap_remove_subparser(subparsers):
    """Munkitap 'remove' subparser"""
    remove_command_subparser = subparsers.add_parser(
        "remove",
        help="Remove brew formula from munkitap"
    )
    remove_command_subparser.add_argument(
        "formula",
        action='store',
        type=str,
        help="Brew formula to remove from munkitap",
    )
    remove_command_subparser.add_argument(
        "-u",
        "--uninstall",
        action="store_true",
        default=False,
        help="Tells brew to uninstall the given formula"
    )


def munkitap_pour_subparser(subparsers):
    """Munkitap 'pour' subparser"""
    pour_command_subparser = subparsers.add_parser(
        "pour",
        help="Pour munkitap formulas (build packages)"
    )
    pour_command_subparser.add_argument(
        "-f",
        "--formula",
        action='store',
        type=str,
        help="Pour a specific formula",
        metavar='\b'
    )
    pour_command_subparser.add_argument(
        "-id",
        "--identifier",
        action='store',
        type=str,
        help="Use the specified identifer",
        dest='identifier',
        metavar='\b'
    )
    pour_command_subparser.add_argument(
        "-m",
        "--skip-munki",
        action="store_true",
        default=False,
        help="Skip importing packages into munki"
    )


def munkitap_set_subparser(subparsers):
    """Munkitap 'set' subparser"""
    set_command_subparser = subparsers.add_parser(
        "set",
        help="Set munkitap preferences"
    )
    set_command_subparser.add_argument(
        "-c",
        "--cache",
        action='store',
        type=str,
        help="Set the munkitap pkg cache location",
        dest='cache',
        metavar='\b'
    )
    set_command_subparser.add_argument(
        "-id",
        "--identifier",
        action='store',
        type=str,
        help="Set the pkg identifier",
        dest='identifier',
        metavar='\b'
    )
    set_command_subparser.add_argument(
        "-mc",
        "--munki-catalog",
        action='store',
        type=str,
        help="Set the munki default catalog",
        dest='munki_catalog',
        metavar='\b'
    )
    set_command_subparser.add_argument(
        "-mr",
        "--munki-repo",
        action='store',
        type=str,
        help="Set the munki repo path",
        dest='munki_repo',
        metavar='\b'
    )
    set_command_subparser.add_argument(
        "-ms",
        "--munki-subdir",
        action='store',
        type=str,
        help="Set the munki subdirectory for munkitap",
        dest='munki_subdir',
        metavar='\b'
    )


def munkitap_list_subparser(subparsers):
    """Munkitap 'list' subparser"""
    list_command_subparser = subparsers.add_parser(
        "list",
        help="Show all formulae in munkitap"
    )
    list_command_subparser.add_argument(
        "-f",
        "--formula",
        action='store',
        type=str,
        help="Show a specific formula",
        metavar='\b'
    )
    list_command_subparser.add_argument(
        "-i",
        "--info",
        action="store_true",
        default=False,
        help="Show formula information",
    )



## Main function

def main():
    """Main function"""
    # Parse script arguments
    main_parser = argparse.ArgumentParser(
        description='Automates building pkg files from brew formulae.'
    )
    main_parser.add_argument(
        '-q',
        '--quiet',
        action="store_true",
        default=False,
        help="Suppress normal output messages. Errors will still be printed to stderr.",
        dest='quiet'
    )
    subparsers = main_parser.add_subparsers(
        title='Munkitap commands',
        description='(command line options for munkitap)',
        help='additional help',
        dest='command'
    )
    munkitap_add_subparser(subparsers)
    munkitap_remove_subparser(subparsers)
    munkitap_pour_subparser(subparsers)
    munkitap_set_subparser(subparsers)
    munkitap_list_subparser(subparsers)

    args = main_parser.parse_args()
    quiet = args.quiet
    munkitap_command = args.command
    try:
        formula = args.formula
    except AttributeError:
        pass


    # Check if sudo/root
    if os.geteuid() == 0:
        print "Do not run munkitap as root"
        exit()

    # Check if homebrew installed
    if not brew_installed():
        print "Please install Homebrew."
        exit()

    # Add
    if munkitap_command == 'add':
        if is_brew_formula(formula, quiet=quiet):
            add_formula(formula, quiet=quiet)
            update_formula_info(formula)
            if args.install:
                install_latest_brew_formula(formula)
        return

    # Remove
    if munkitap_command == 'remove':
        remove_formula(formula, quiet=quiet)
        if args.uninstall:
            uninstall_brew_formula(formula)
        return

    # Pour
    if munkitap_command == 'pour':
        if not args.formula and not get_on_tap():
            if not quiet:
                print "Nothing on tap to pour"
            return
        # Install brew-pkg
        install_brew_tap('timsutton/formulae')
        install_latest_brew_formula('brew-pkg')
        if args.formula:
            is_brew_formula(formula, quiet=quiet)
            if args.formula in get_on_tap():
                install_latest_brew_formula(formula)
                update_formula_info(formula)
                out, err = pour_formula(
                    formula,
                    identifier=args.identifier,
                    quiet=quiet
                )
                if out and not err:
                    pkg_path = out.split('\n')[-2].split(' ')[-1]
                    pkg_path = os.path.join(
                        get_cache(),
                        formula,
                        pkg_path
                    )
                    update_formula_info_pkg(formula, pkg_path)

            else:
                if not quiet:
                    print args.formula + " not in munkitap"
                    return
        else:
            for on_tap_formula in get_on_tap():
                install_latest_brew_formula(on_tap_formula)
                update_formula_info(on_tap_formula)
                out, err = pour_formula(
                    on_tap_formula,
                    identifier=args.identifier,
                    quiet=quiet
                )
                if out and not err:
                    pkg_path = out.split('\n')[-2].split(' ')[-1]
                    pkg_path = os.path.join(
                        get_cache(),
                        on_tap_formula,
                        pkg_path
                    )
                    update_formula_info_pkg(on_tap_formula, pkg_path)

        
        # Add to munki
        if args.skip_munki:
            return
        if not munkitools_installed():
            if not quiet:
                print "Munki tools not installed"
            return
        munki_repo = get_munki_repo()
        if not os.path.isdir(munki_repo):
            if not quiet:
                print "Munki repo not found"
            return
        munki_subdir = get_munki_subdir()

        munkitap_catalog = get_munki_catalog()
        if not os.path.isfile(os.path.join(
            munki_repo,
            'catalogs',
            munkitap_catalog
        )):
            if not quiet:
                print munkitap_catalog + " catalog not found in munki"
            return

        catalog_info = get_all_catalog_info(munki_repo)
        already_in_munki = generate_already_in_munki(catalog_info)
        formula_info = get_formula_info()

        if args.formula:
            info = formula_info[args.formula]
            pkginfo = get_pkginfo(
                info['pkg'],
                (args.formula[0].upper() + args.formula[1:]),
                info['description'],
                info['url'],
                munkitap_catalog,
                quiet=quiet
            )
            if not already_in_munki(pkginfo):
                add_pkg_to_munki(
                    info['pkg'],
                    pkginfo,
                    get_munki_repo(),
                    get_munki_subdir(),
                    quiet=quiet
                )
                run_makecatalogs(munki_repo)
        else:
            need_makecatalogs = False
            for on_tap_formula in get_on_tap():
                info = formula_info[on_tap_formula]
                pkginfo = get_pkginfo(
                    info['pkg'],
                    (on_tap_formula[0].upper() + on_tap_formula[1:]),
                    info['description'],
                    info['url'],
                    munkitap_catalog,
                    quiet=quiet
                )
                if not already_in_munki(pkginfo):
                    need_makecatalogs = True
                    add_pkg_to_munki(
                        info['pkg'],
                        pkginfo,
                        get_munki_repo(),
                        get_munki_subdir(),
                        quiet=quiet
                    )
            if need_makecatalogs:
                run_makecatalogs(munki_repo)
        return

    # Set
    if munkitap_command == 'set':
        if args.cache:
            set_cache(args.cache)
        if args.identifier:
            set_id(args.identifier)
        if args.munki_catalog:
            set_munki_catalog(args.munki_catalog)
        if args.munki_repo:
            set_munki_repo(args.munki_repo)
        if args.munki_subdir:
            set_munki_subdir(args.munki_subdir)
        return

    # List
    if munkitap_command == 'list':
        on_tap_formulae = sorted(set(get_on_tap()))
        formula_info = get_formula_info()
        if args.formula:
            if args.formula in on_tap_formulae:
                print args.formula + " is on tap"
                if args.info:
                    for key in sorted(formula_info[formula].keys()):
                        print "    " + key + " = " + formula_info[formula][key]
                    print
            else:
                print args.formula + " not on tap"
                print "Please add it to munkitap"
        else:
            for formula in on_tap_formulae:
                print formula
                if args.info:
                    for key in sorted(formula_info[formula].keys()):
                        print "    " + key + " = " + formula_info[formula][key]
                    print
        return
            

if __name__ == "__main__":
    main()
